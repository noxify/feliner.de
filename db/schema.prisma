// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens   Token[]
  sessions Session[]

  currentPet Int?
  Pet        Pet[]
  Weight     Weight[]
  Phvalue    Phvalue[]
  Insulin    Insulin[]
  Bloodsugar Bloodsugar[]
  PetMember  PetMember[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  //type        String
  // See note below about TokenType enum
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model Pet {
  id         Int          @id @default(autoincrement())
  userId     Int
  name       String
  createdAt  DateTime?    @default(now())
  updatedAt  DateTime?    @updatedAt
  user       User?        @relation(fields: [userId], references: [id])
  weight     Weight[]
  phvalue    Phvalue[]
  insulin    Insulin[]
  bloodsugar Bloodsugar[]
  member     PetMember[]
  invitation Invitation[]
}

model Weight {
  id        Int       @id @default(autoincrement())
  petId     Int
  userId    Int
  date      DateTime  @db.Date
  time      DateTime  @db.Time
  value     Float
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  pet       Pet?      @relation(fields: [petId], references: [id])
  user      User?     @relation(fields: [userId], references: [id])
}

model Phvalue {
  id        Int       @id @default(autoincrement())
  petId     Int
  userId    Int
  date      DateTime  @db.Date
  time      DateTime  @db.Time
  value     Float
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  pet       Pet?      @relation(fields: [petId], references: [id])
  user      User?     @relation(fields: [userId], references: [id])
}

model Insulin {
  id        Int       @id @default(autoincrement())
  petId     Int
  userId    Int
  date      DateTime  @db.Date
  time      DateTime  @db.Time
  value     Float
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  pet       Pet?      @relation(fields: [petId], references: [id])
  user      User?     @relation(fields: [userId], references: [id])
}

model Bloodsugar {
  id        Int       @id @default(autoincrement())
  petId     Int
  userId    Int
  date      DateTime  @db.Date
  time      DateTime  @db.Time
  value     Float
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  pet       Pet?      @relation(fields: [petId], references: [id])
  user      User?     @relation(fields: [userId], references: [id])
}

model PetMember {
  id        Int       @id @default(autoincrement())
  petId     Int
  userId    Int
  role      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  pet       Pet?      @relation(fields: [petId], references: [id])
  user      User?     @relation(fields: [userId], references: [id])
}

model Invitation {
  id        Int       @id @default(autoincrement())
  petId     Int
  email     String
  role      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  pet       Pet?      @relation(fields: [petId], references: [id])

  @@unique([petId, email])
}
